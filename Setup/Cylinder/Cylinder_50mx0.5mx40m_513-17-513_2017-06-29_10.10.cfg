################################################################################
# Parameters to control the model input/output
################################################################################

# IMPORTANT: This is an example on how the configuration file should look like.
# There are dummy names as some of the input arguments for file names.and hence,
# do not exist. Attempting to use this file as is will only result in 
# frustration. You have been warned.

# The # comments out the line.  If a parameter is commented, its value is set to
# zero.
# NOTE: The density is consided 1.0 for all simulations. 

#-------------------------------------------------------------------------------
#                                 Output Setup
#-------------------------------------------------------------------------------

# Output formats.  Output formats can be combined by giving one line per type.
# Supported format types are:
#    Matrix          display values on the screen
#    DataFile        writes data to an ASCII file with .dat suffix
#    Binary          writes a single binary file using MPI-IO with a .bin
#                       suffix
#    PBinary         writes parallel binary files using MPI-IO with a .bin
#                       suffix
#    VTK             Visualization Toolkit Image file (.vti)
#    PVTK            Parallel VTK Image file (.pvti and .vti). Number of vti
#                       files generated is the same as the number of GPUs.
#    HDF5_Multiple   Write out heavy data in HDF5 format with XDMF files for
#                       visualization software. Produces multiple HDF5 files,
#                       one for each time step.
#
# Multiple output formats can be requested (e.g. both Matrix and VTK). The 
# PVTK option cannot be combined with its sequential counterpart.  Doing so
# defaults to the VTK option. Also, VTK cannot be chosen when using more than
# eight GPUs and will default to PVTK.
#OutputFormat  PBinary 
OutputFormat  VTK
OutputFormat  Binary 

# Two methods of controlling output frequency: iterations and physical time.
# Setting an interval negative will disable that method of control. 

# Output by iteration:
# Write files every N timesteps. OutputFrequencyVTK is for VTK and PVTK file 
# types. OutputFrequencyText is for DataFile, Binary, and PBinary file types.
# The output frequency can be changed part way through a simulation by
# setting OutputFrequencyVTKSwitch or OutputFrequencyTextSwitch. WTK output
# frequency will be every OutputFrequencyVTK1 timesteps until 
# OutputFrequencyVTKSwitch timesteps is reached, then the frequency will be 
# every OutputFrequencyVTK2 timesteps.
OutputFrequencyVTK1          100000 
OutputFrequencyVTK2          5000000 
OutputFrequencyVTKSwitch     2500000 
OutputFrequencyText1         100000
OutputFrequencyText2         100000
OutputFrequencyTextSwitch    2500000 

# Output by physical time:
# Writes files every time interval (in seconds) rather than every N 
# See avobe for description of interval switching and corresponding file 
# types.
OutputTimeIntervalVTK1        10 
OutputTimeIntervalVTK2        5 
OutputTimeIntervalVTKSwitch   150
OutputTimeIntervalText1       100000
OutputTimeIntervalText2       500000 
OutputTimeIntervalTextSwitch  10000000 

# An optional path for the results
OutputPath     results
# Optional prefix (default is 'gin3d_soln')
OutputPrefix   Cylinder

# Which 2D plane to output (XY, XZ, YZ) or Mesh for the entire 3D domain.
# Can select multiple planes.
OutputPlane  Mesh

# If a plane is selected, choose the location of the slice along the
# direction perpendicular to the plane as a decimal (0.0-1.0)
OutputSlice 0.50

# Data output for the Matrix output: u, v, w, p, phi
MatrixData  u

# Vorticity calculation: True or False
Vorticity   True

# Is this a precursor simulation? True or False
# If True, a full mesh Text output will be written at OutputFrequencyTextSwitch
# and velocity planes will be written out based on OutputPlane and OutputSlice
# at every OutputFrequencyText2 iteration. OutputPlane must be set to a plane.
PrecursorSim  False

# Output options for OutputVariablesVTK and OutputVariablesTXT tags:
#   *   All variables
#   @   Only variables needed for restarting simulation 
#   u   Velocity
#   p   Pressure 
#   t   Temperature
#   q   Q-criterion
#   d   Density (PGM Solid Representation)
#   g   Solid Geometry (Immersed Boundary Method)
#   z   Distance field
#   n   Turbulent kinematic viscosity (nu_turb)
#   c   Smagorinsky model coefficient
# Choose any combination of these, each character separated by spaces.  The
# time-averaged values are output in the final files, if applicable. 
# For example, OutputVariablesVTK u p t will output velocity, pressure,
# instantaneous temperature.
# If no or incorrect options are given, * is the default. 

# Choose output variables for VTK
OutputVariablesVTK  u z n c p g
# Choose output variables for DataFile and/or Binary
OutputVariablesTXT  @

#-------------------------------------------------------------------------------
#                                Mesh Definition
#-------------------------------------------------------------------------------
# Simple mesh size, requires three integer arguments after Grid, separated by
# spaces.
Grid  257 17 257 

# Physical domain size, requires three floating point arguments after
# Dimensions, separated by spaces.
Dimensions  50 0.5 40 

# Reference Length
# This is used as the characteristic length 'L' in calculations of the
# Reynolds and Rayleigh numbers.  Leave unset if you do not know what it is.
#
# Enter either 'LX', 'LY', 'LZ', or a number.
ReferenceLength 1.0  

#-------------------------------------------------------------------------------
#                        Navier-Stokes Solver Parameters 
#-------------------------------------------------------------------------------
# Specify a computational time step. Set a to negative number if dynamic time
# step adjustment is desired.
ConstTimeStep  -0.0015

# Specify a specific physical time (in seconds) for stopping the simulation.
StopTime  250 

# Kinematic viscosity
Nu  0.01

# Pressure correction in projection algoritm: True or False
PressureCorrection False 

# Choose the finite difference method for spatial derivatives
# 0.00 means CDS, 1.00 means FOU, values between are allowed
AdvectionScheme  0.00

# CFL*dz/velmax is the convective dt limit
CFL      0.4 

# DTStability*dz*dz/Nu is the viscous dt limit
DTStability   0.4 

# The time derivative method
#   Euler        (first order forward Euler)
#   AdamsBash    (second order Adams-Bashforth, aka 'AB2')
TimeMethod  AB2 

# Constant forcing, requires three floating point arguments after Forcing,
# separated by spaces.
Forcing  0.0000 0.0000 0.0000

# For time-varying 2D direction (x- and y-directions) of forcing, give a magnitude,
# a starting time, and the coefficients to a tenth-order polynomial describing the
# angle describing the direction of the forcing from east, counter-clockwise.
# To turn on, set ForcingDirectionMagnitude to a value greater than 0.0.
# This overrides Forcing set above when ForcingDirectionStartTime is reached.

ForcingDirectionMagnitude   0.0
ForcingDirectionStartTime   3600.0
ForcingDirectionPolyCoeffs  0.0e00 0.0e00 0.0e00 0.0e00 0.0e00 0.0e00 0.0e00 0.0e00 0.0e00 0.0e00 0.0e00

#-------------------------------------------------------------------------------
#                          Domain Boundary Conditions
#-------------------------------------------------------------------------------

#    Face type           Boundary setting
#    ------------------  -------------------------------------
#    NoSlip              velocity 0 at boundary
#    FreeSlip            velocity unchanged at boundary
#    Inlet               BC = inlet
#    Outlet              BC = interior velocity
#    ConvectiveOutlet    See Ferziger (2001)
#    Driven              BC = inlet in normal direction
#    Periodic            BC = opposite side
#    LogarithmicInlet    an inlet with a constant logarithmic profile in the
#                          z-direction.
#    DataBase            inflow database BC, usage: DataBase path_to_database

# Only one each of an Inlet and Driven are allowed.

# Bottom is Z=0, Top   is in the Z+ direction (w component of velocity).
# South  is Y=0, North is in the Y+ direction (v component of velocity).
# West   is X=0, East  is in the X+ direction (u component of velocity).

Face_West     Inlet
Face_East     Outlet
Face_South    Periodic
Face_North    Periodic
Face_Bottom   FreeSlip
Face_Top      FreeSlip 

#PeriodicShift  400.0

# For standard cases one can use a BC shortcut by commenting the tags starting
# with face and set the Boundaries tag to one of the following:
#   Channel            W Inlet, E ConvectiveOutlet, S/N FreeSlip, B/T NoSlip
#   PeiodicChannel     W/E Periodic, S/N Periodic, B/T NoSlip
#   DrivenCavity       W/E NoSlip, S/N FreeSlip, B NoSlip, T Driven
#   Cavity             W/E NoSlip, S/N FreeSlip, B/T NoSlip
#   Urban              W/E FreeSlip, S NoSlip, N FreeSlip, B Outlet, T Inlet
#   PeiodicBox         All faces set to periodic 
#Boundaries  PeriodicChannel

# InletVelocities requires three floating point values separated by spaces.
# These values apply to Inlet and LogarithmicInlet boundary conditions. With 
# the LogarithmicInlet, it is only used to determine the angle of the flow so
# magnitude does not matter.  The magnitude is found from the FrictionVelocity.
# Note: These are signed vectors, negative is west/south
InletVelocities  1.0000 0.0000 0.0000

# To drive a periodic flow with a constant mass flow rate, we can define 
# different regions that will be given independent forcing values. The regions
# are defined by the ForcingRegionBounds tag which requires two values, the
# first for the lower bound and the second for the upper bound. The bounds are
# determined by the distance field so ensure that is loaded. The forcing will 
# be adjusted by the difference between a prescribed mass flow rate and the 
# simulated mass flow rate. The prescribed mass flow rate is initially set by
# the three values given to the ForcingRegionFlowRate tag. The three values
# correspond to the x-, y- and z-directions, respectively.  The number of 
# ForcingRegionBounds and ForcingRegionFlowRate tag sets need to be equal to
# the number of regions given to the NumberForcingRegions tag.  The first
# ForcingRegionFlowRate tag applies to the first ForcingRegionBounds tag.
ConstantMassFlowRate  False
NumberForcingRegions 1
ForcingRegionBounds    0.0  0.0
ForcingRegionFlowRate  0.0  0.0  0.0

# This can be used to force the vref to something other than inlet magnitude
ReferenceVelocity 1.0

# The InletRoughness parameter gives the denominator in the natural log when
# applying the LogarithmicInlet boundary condition.
Roughness  0.0001

# If DataBase was chosen as a boundary condition, specify at what iteration
# the inflow database started.
DBStart 0

#-------------------------------------------------------------------------------
#                             Initial Conditions
#-------------------------------------------------------------------------------
# Set the initial condition. Choose from the following:
#    File                Load from file. Fill in Initial_* tags below.
#    TaylorGreenVortex   u =  sin(2*PI*x)*cos(2*PI*y)
#                        v = -cos(2*PI*x)*sin(2*PI*y)
#                        w = 0.0
#    TurbulentChannelX   u =  u_tau( 1/kappa * log(z+) + 5.5) + sin(Pi*z)*cos(2*x)*sin(2*y)
#                        v =  -( 1 + cos(Pi*z) ) * sin(x) * sin(4.1*y)
#                        w = -0.5*Pi*sin(x) * sin(Pi*z) * cos(1.25*Pi*y)
#    TurbulentChannelZ   u =  u_tau( 1/kappa * log(x+) + 5.5) + sin(Pi*x)*cos(2*z)*sin(2*y)
#                        v =  -( 1 + cos(Pi*x) ) * sin(z) * sin(4.1*y)
#                        w = -0.5*Pi*sin(z) * sin(Pi*x) * cos(1.25*Pi*y)
#    ComplexTerrain      u = u_tau/kappa * log(z/z_not) * cos(theta)
#                        v = u_tau/kappa * log(z/z_not) * sin(theta)
#                        w = 0.0
#    ABCFlow             u = cos(y) + sin(z)
#                        v = sin(x) + cos(z)
#                        w = cos(x) + sin(y)
# An option not listed or no option specified at all results in an
# initial field of zero velocity.

InitialCondition None

# To restart a simulation, simply give the directory to the ouptut from the previous
# simulation. The most recent timestep present in the directory will be chosen.
# Full path starting from / is recommended. ENSURE the last / is also included. This
# DOES NOT automatically place in the / if missing.
# This overrides InitialCondition tag.

#RestartDirectory /scratch/dustinma/ginTrialRun/bin/Cylinder_Re100.26803/results/

# User-defined initial conditions are possible.  Use the following tags to input
# the desired initial condtion in Reverse Polish Notation (RPN). 
# IMPORTANT: Separate each number, variable, and operator by a single space.
# To keep values on the stack, use a comma as an operator.
# To operate values stored on the stack, put st in front of the operator, e.g. st+.
# Note that the operations are similar to Matlab.  The ^ symbol is power, log is
# the natural logarithm, and log10 is the base 10 logarithm. Standard sin, cos, 
# and tan trig functions are also available.
# To negate a value: neg.
# The following internally defined variables and constants are available to this
# feature:
#    Cs     Smagorinsky Coefficient (given in config file)
#    Utau   friction velocity (given in config file)
#    z0     inlet roughness (given in config file)
#    nu     kinematic viscosity (given in config file)
#    Uin    U Inlet Velocity (given in config file)
#    Vin    V Inlet Velocity (given in config file)
#    Win    W Inlet Velocity (given in config file)
#    rand   random number (-1.000 .. 1.000)
#    pi     3.14159...
#    kappa  0.41
#    x      x-coordinate
#    y      y-coordinate
#    z      z-coordinate
#    D      distance field, if provided
#    chx    channel wall-normal coords if x is wall-normal direction
#    chy    channel wall-normal coords if y is wall-normal direction
#    chz    channel wall-normal coords if z is wall-normal direction
# Example 1. Algebraic form: 1/kappa * ln(y+) + B
# z Utau * nu / log kappa / 5.2 + 

# Example 2. exp(-z/10) + 2.0*cos(5.0*x) - (y + z)^2
# z 10.0 / neg exp , 5.0 x * cos 2.0 * , y z + 2 ^ st- st+

# Example 3. Utau / kappa * log(D/0.015) - 5.0*( 1.0+cos(4.0*PI*z) ) * sin(x) * sin(5.0*y)
# D 0.015 / log Utau * kappa / , 4.0 pi * z * cos 1.0 + 5.0 * , x sin , 5.0 y * sin st* st* st-

# Uncomment the following for user-defined initial conditions.

#UserInitialCondition_U
#UserInitialCondition_V
#UserInitialCondition_W

#-------------------------------------------------------------------------------
#                            Pressure Solver Setup
#-------------------------------------------------------------------------------
# Choose either Iterative or Multigrid
SolverMethod	          Multigrid

# Reasonable values:
#            Solver   Jacobi     GS
#            Loops    10-40      5-30
#            Weight   1.0        1.0-1.8
Iterative_Solver        Jacobi 
Iterative_Loops         40
Iterative_Weight        1.0

# Reasonable values:
#   Cycle         V, W, or W1, recommend V
#   Smoother      Jacobi or GS
#   Loops         1-10
#   Levels        2-N, recommend about 2-3 less than the maximum
#   SmoothIters   1-10 1-10. Good choices include '2 1' and '4 2'
#   JacobiWeight  0.55 - 0.95, recommend 0.86 (from Trottenberg says 0.857)
#   SORWeight     1.0 - 1.8
MG_Cycle                V
MG_Smoother             Jacobi
MG_Loops                2
MG_Levels               50
MG_Smoother_Iterations  4 2
MG_Jacobi_Weight        0.86
MG_SOR_Weight           1.00

#-------------------------------------------------------------------------------
#                            Turbulence Parameters
#-------------------------------------------------------------------------------

# The filter width for LES models is the numerical grid.
# Turbulence model:
#   Laminar        Initialize simulation as laminar 
#   None           No turbulence model but initialized as turbulent flow
#   Smagorinsky    The basic eddy viscosity model (J. Smagorinsky, 1963)
#   LagDynamic     The Lagrangian dynamic model Ref:(Meneveau, Lund, Cabot; 1996)
#   SmagRANS       A hybrid RANS/LES approach with the original Smagorinsky 
#                    (LES) and Prandtl mixing length (RANS) models
#   LagDynRANS     A hybrid RANS/LES approach with the Lagrangian dynamic
#                    (LES) and Prandtl mixing length (RANS)  models
#   LinearForcing  Linear forcing for DNS of isotropic turbulence.
#                  See T.S. Lundgren, CTR Briefs, 2003.
#   MasonThomson   Mason Thomson model used with original Smagorinsky model.
#                  See Mason, Thomson, JFM, 1992
TurbulenceModel  Laminar

# The default initialization is a quiescent flow field.  Certain combinations
# of boundary conditions and flow regimes have preset initial conditions in
# the code, see Domain Boundary Conditions section for more details.  Care
# should be taken when using the LagDynamic model as a quiescent field will
# result in Lij and Mij both being zero.  Cs in with this model is essentially
# (LijMij) / (MijMij).

# Cs for Smagorinsky model.  Typically 0.01 - 0.25.
TurbCS 0.10

# Friction velocity used for turbulence intialization
FrictionVelocity  0.347

# For RANS/LES transition height, either set the tag 
# TransitionHeight to a value above 0.00001 or set the
# dimensionless parameter Zeta,
#   Zeta = h / (2*Delta),
# where h is height normal to surface and Delta is filter width.
# TransitionHeight overrides Zeta if both are set.

#TransitionHeight  0.1

Zeta  3.0 

#-------------------------------------------------------------------------------
#                            Complex Geometry
#-------------------------------------------------------------------------------

# Complex geometry for obstructions, urban area, etc. First give tag Obstruction
# followed by one of the following:
#   Cylinder                  An internally defined cylinder 
#   City                      Obsolete: same as PGM okc_arena.pgm
#   PGM <file>                Reads in a PGM height map
#   IBOption <#> <#> <#> <#>  Immersed boundary (IB) method option with number of
#                             IB nodes for scalar, u face, v face and w face, 
#                             respectively. See below for loading IB nodes from 
#                             files. IBOption must be replaced. See following list.

# List for IBOption:
#    IBIMP           Standard two-point reconstruction. (Explicitly enforces
#                    the impermeability condition.)
#    IBORIG          Original two-point reconstruction. (Does not explicitly
#                    enforce the impermeability condition.)
#    IBQ             Standard three-point reconstruction.
#    IBIMPDF         Two-point reconstruction with distance field (see IBIMP).
#    IBORIGDF        Two-point reconstruction with distance field (see IBORIG).
#    IBQDF           Three-point reconstruction with distance field.
#    IBCHAN          Two-point reconstruction for x-streamwise channel flow.
#    IBDFCHAN        Two-point reconstruction with distance field for
#                    x-streamwise channel flow.
#    IBCHANSP        Two-point reconstruction with spatial averaging for
#                    x-streamwise channel flow.
#    IBDFCHANSP      Two-point reconstruction with spatial averaging for
#                    x-streamwise channel flow with distance field.
#    IBSmoothWall    Two-point reconstruction for arbitrary smooth wall.
#    IBDFSmoothWall  Two-point reconstruction for arbitrary smooth wall
#                    with distance field.

# The IBReconstruction tag can be one of the following:
#    Linear        Linear reconstruction all all components
#    RoughLogLaw   Rough log law reconstruction on tangential velocity,
#                  linear reconstruction on normal velocity to enforce impermeability
#    OneSevenths   One-sevenths power law reconstruction on tangential velocity,
#                  linear reconstruction on normal velocity to enforce impermeability,
#                  requires ReferenceLength to be set to denominator in power law

Obstruction IB 510 510 510 510 

IBReconstruction Linear

# The following are only used for PGM obstructions.

# The number of mesh points used to resolve the jagged geometry cell.
# This must be at least 2, but sometimes more are desired to better
# resolve flow around the blocky cells.  Note that each geometry cell
# will result in this many computational cells in each dimension.  So
# a 10x10x10 geometry file with 4 for the value below will use 40x40x40
# mesh cells.
#
# Can specify one number or three for different <X,Y,Z> resolution
MeshPointsPerGeometryCell 2

# The number of mesh cells to offset the geometry file to allow for boundaries.
# These are specified in map directions, not face directions.
# Note: A single mesh cell is always added to each side to take into account
# the computational boundary.

DomainOffsetEastWest      0   0
DomainOffsetNorthSouth    0   0
DomainOffsetSurfaceSky    0   0

# Typically the input files have more Z resolution than is used via the
# delta z setting.  There are two ways of getting a finer model: go into the
# the PGM file and adjust delta z (e.g. from 10m to 5m).  The second is to
# modify this parameter.  The L* value should remain constant in either case.
# Values less than 1 will coarsen, values more than 1 will make a finer mesh.
MeshHeightScaling 1.0

# The following are only used for the Immersed Boundary Method. 

# The files to load the immersed boundary information from. See README for or
# samples under ibdata directory for format. There will be a total of eight files
# to load, four immersed boundary node files and four obstacles flag files.  
# The four files of each type correspond to the following locations:
#     Scalar  (Cell center)
#     U Face  (Location of u velocity component) 
#     V Face  (Location of v velocity component) 
#     W Face  (Location of w velocity component) 
# The number of nodes loaded for each location is set above with the Obstruction
# tag.
#
# With the option of IBDF, a distance field file must be specified that is in
# the same format as as the file used for restarting a simulation.

# Files for loading immersed boundary nodes
IBNodeFile_S   /scratch/dustinma/ginTrialRun/bin/Cylinder/Cylinder_50mx0.5mx40m_513-17-513_ibnode_s.txt
IBNodeFile_U   /scratch/dustinma/ginTrialRun/bin/Cylinder/Cylinder_50mx0.5mx40m_513-17-513_ibnode_u.txt
IBNodeFile_V   /scratch/dustinma/ginTrialRun/bin/Cylinder/Cylinder_50mx0.5mx40m_513-17-513_ibnode_v.txt
IBNodeFile_W   /scratch/dustinma/ginTrialRun/bin/Cylinder/Cylinder_50mx0.5mx40m_513-17-513_ibnode_w.txt

#  Files for loading obstacle flags
IBFlagFile_S   /scratch/dustinma/ginTrialRun/bin/Cylinder/Cylinder_50mx0.5mx40m_513-17-513_flag_s.txt
IBFlagFile_U   /scratch/dustinma/ginTrialRun/bin/Cylinder/Cylinder_50mx0.5mx40m_513-17-513_flag_u.txt
IBFlagFile_V   /scratch/dustinma/ginTrialRun/bin/Cylinder/Cylinder_50mx0.5mx40m_513-17-513_flag_v.txt
IBFlagFile_W   /scratch/dustinma/ginTrialRun/bin/Cylinder/Cylinder_50mx0.5mx40m_513-17-513_flag_w.txt

# File for loading distance field. If a file is given, it will be loaded.
# Special keywords will generate a distance field within GIN3D.
# Special keywords include:
#    TPC_Z_WallNormal
DistanceField  /scratch/dustinma/ginTrialRun/bin/Cylinder/Cylinder_50mx0.5mx40m_513-17-513_distfield.dat

#-------------------------------------------------------------------------------
#                              Temperature
#-------------------------------------------------------------------------------

# Notes:
#    Re = (ReferenceVelocity * L / Nu)
#    Ra = (g * Beta * (Tmax - Tmin) * L^3) / (Gamma * Nu)
#    Pr = (Nu * RhoInf) / Gamma
#    Gr = Ra / Pr
# Whether or not to solve for and output temperature
SolveTemperature  False

# Gravity magnitude
Gravity   0.0 0.0 -9.801
# Thermal expansion coefficient (1/T for ideal gas)
Beta      2.87e-03
# Typically 1.0.
# Setting this to 0 will mean temperature will not drive momentum.
Rho_Infinity  1
# Thermal Diffusivity  (Nu / Prandtl number)
Gamma     2.856e-05

# Scalar transport for temperature
# Note that gravity is assumed to act in the negative Z direction.
# The Boussinesq approximation is included in the w-momentum equation.
Temp_West   Dirichlet    400 
Temp_East   Dirichlet    343.15
Temp_South  Neumann      0
Temp_North  Neumann      0
Temp_Bottom Neumann      0
Temp_Top    Neumann      0

# Source term for temperature
Source_PHI 0.0000

#-------------------------------------------------------------------------------
#                               Time Series Options 
#-------------------------------------------------------------------------------
# Set averaging to true or false.  Set the starting time for averaging to start.
# Starting time does not matter if PrecursorSim is set to True.
TimeAvg    True 
StartingTime  18000 
# AvgOutput options:
#	Mean	             Ensemble average
#	ReynoldsSymmetric  Compute symmetric components of Reynolds stress tensor
#	ReynoldsDiagonal   Compute diagonal components of Reynols stress tensor
#	RMS	             Compute rms values of fluctuations 
AvgOutput     Mean
# Pass in mean velocity profile to compute turbulent fluctuations in the 
# z-direction.
#MeanProfile_U
#MeanProfile_V
#MeanProfile_W

#-------------------------------------------------------------------------------
#                          Variable Tracking  
#-------------------------------------------------------------------------------
# Track all applicable primitive variables as the simulation progresses.  
#
# Give the physical time interval to output the variables e.g., giving a value
# of 20.0 will output every 20 seconds of physical time. 
TrackInterval  0.0078430

# Give the integer number of coordinates to track after the TrackCoordinates tag.
# Important for allocation when loading in the tracked coordinates.
# List the coordinates where tracking will occur with the TrackCoord tag in
# front, one per line, in the format:
# TrackCoord x y z
# where x, y, and z are floating point numbers. Set number of coordinates to
# track to 0 if no tracking is desired.
# 
#TrackCoordinates 1
#TrackCoord 25.75 0.233333 19.6086
#TrackCoord 28.5 0.233333 19.6086
#TrackCoord 31.0 0.233333 19.6086
#TrackCoord 33.75 0.233333 19.6086
#TrackCoord 570.0 255.0 10.0

#-------------------------------------------------------------------------------
#                          Reference Points
#-------------------------------------------------------------------------------

#ReferencePointsOut	output_points.dat
#ReferencePointsOut	WS_Locations.dat
#ReferencePointsIn	input_points.dat

# UTM (zone 11) coordinates of SW corner of DEM file in meters
#ReferencePointsOrigin	634061 4735991 939.5

# Frequency of output, in physical time.  Use 's', 'm', 'h', or 'd'
ReferencePointsOutFreq  0.5s
